<div>
    <div class="jumbotron subhead">
        <h1>About</h1>
    </div>
    <p>
        This application allows you to analyze and visualize the typing patterns you create when you use different keyboard layouts, such as the
        <a href="https://en.wikipedia.org/wiki/QWERTY">QWERTY</a>, <a href="http://www.theworldofstuff.com/dvorak/">Dvorak</a>, and
        <a href="http://colemak.com/">Colemak</a> layouts.
    </p>
    <hr/>
    <p>
    This version of the app was forked by SteveP from <a href="http://patorjk.com/keyboard-layout-analyzer/">patorjk's original analyzer</a>.
    </p>
    <p>A number of changes are made in this version with the aim of making the analyzer more useful and accurate, particularly in regard to the scoring calculation. 
    The changes are detailed below, so you can evaluate the merits of these changes yourself. A huge thanks to Patrick (patorjk) for releasing his source code, making this forked version possible!
    </p>

    <h2>Scoring Algorithm</h2>
    <p>
        I have studied the source code in the original app to understand how the analyzer and scoring systems work. The following is my best interpretation of its methodology:
    </p>
    <p>
        Layouts are scored according to four weighted elements:<br/>
        - distance fingers moved (33%)<br/>
        - distribution of work among fingers (33%)<br/>
        - same-finger bigrams (17%)<br/>
        - hand alternation (17%)<br/>
    </p>
    <p>I now present a critique of each of these elements, and where appropriate, describe the changes I have made in this version of the app:</p>
    
    <h3>Element 1: Distance calculation</h3>

    <p>The distance calculation works by simulating the typing of the input text and measuring the distance between successive keys. These distances are summed up, and a score is calculated based on the average distance moved across all key presses. This method works well for the most part, but I have identified a couple of flaws:<br/>
    </p>
    <p><b>Flaw 1</b>: no consideration is taken into account of the type of movement</p>
    <p>Consider if you start with your right hand in the home position (using Qwerty), and type JH, JU, and JM. It is more difficult to move from J to H than it is from J to U or J to H. This is because the index finger can easily stretch outward to the U or curl inward to the M. However, to type the H, the finger has to splay outwards, or the whole hand has to move. Consequently, more effort is required for this type of lateral motion. This phenomenon is well-documented in the justification behind both the Workman and Colemak-DH layouts.</p>
    <p>If you simply measure distance between J and its nearby keys however, then due to the keyboard stagger, JH is a shorter distance than JU or JM. In such cases, the default algorithm rewards motions involving more difficult (but slightly nearer) keys, as shown in the table below. What would be desired to fix this problem, is to replace the pure distance measure with a distance penalty, in which horizontal movements are given a higher penalty than vertical ones for the same distance moved.</p>
    <p><b>Flaw 2</b>: Even with a directional penalty added, notice that the distance between JM and JN is the same. In reality though, again because of the stagger on standard boards, the JM movement is easier. To fix this issue, we need to consider that the hands approach the keyboard at an angle. On the right-hand side of the keyboard, the arms approach the keyboard in the same direction as the stagger, but on the left-side, the stagger is effectively the wrong way around. I'd argue that a complete and accurate algorithm should take this effect into account.</p>

    <p><b><u>Fix:</u></b> This version of the app applies fixes to the algorithm to address these two flaws.<br/>
    - The simple distance calculation is replaced by a "distance penalty". This is identical to the distance travelled for vertical movements, but a factor of 1.5 (i.e. a 50% penalty) is introduced for horizontal components of each movement.<br/>
    - The coordinate system for movement vectors is rotated to align with the angle of approach of the hands. This currently set to a 15° angle, and is applied clockwise for the left hand, anticlockwise for the right hand.<br/>
    <p>This element of the scoring system is now more highly prioritised too, increasing from 33% to 50%.</p>

    <table>
    <tr>
    <td>
        <img src="./img/kb-j-arrows.png" class=".center"/>
    </td>
    <td>
    <table style="display: inline-block; margin-left:40px" border="1" cellpadding="2">
        <tbody>
        <tr><th>keys</th><th>distance¹</th><th>penalty²</th></tr>
        <tr>
        <td>JU</td><td>1.03u</td><td>1.03</td>
        </tr>
        <tr>
        <td>JH</td><td>1.00u</td><td>1.47</td>
        </tr>
        <tr>
        <td>JN</td><td>1.12u</td><td>1.35</td>
        </tr>
        <tr>
        <td>JM</td><td>1.12u</td><td>1.17</td>
        </tr>
        </tbody>
        <tfoot>
        <tr>
        <td colspan="3">
        ¹ Actual physical distance in key units<br/>
        ² Distance penalty as calculated in this version of the app by applying the two fixes.
        </td>
        </tr>
        </tfoot>
    </table>    
    </td>
    </tr>
    </table>

    <h3>Element 2: Finger distribution</h3>

    <p>The original algorithm defines a score value for each finger as follows:<br/>
        PINKY: 0.5<br/>
        RING: 1.0<br/>
        MIDDLE: 4.0<br/>
        INDEX: 2.0<br/>
        THUMB: 0.5<br/>
    </p>
    <p>Then, it calculates what proportion of typing is done on each finger, subject to a maximum of 20% per finger. The final score is proportional to this sum over all fingers:
    (finger-score) x (finger-frequency)</p>
    <p>The consequence of this algorithm is that middle finger is heavily favoured and that high scoring layouts should aim to assign 20% of the work on each these fingers. Layouts should also attempt to use index finger heavily with very little or none on pinkies and thumbs. I think this method <i>may</i> be flawed in that it too heavily weights the middle finger, and encourages heavy loading of favoured fingers, upto the seemingly arbitrary 20%. However, I accept that this element of the algorithm may in fact be counter-balanced to some extent by the distance algorithm, which would reward all home key usage (including pinkies) by assigning a distance of zero.</p>
    <p><b><u>Fix:</u></b> For the time being, I have changed the finger weights to these values:<br/>
        PINKY: 0.5<br/>
        RING: 1.0<br/>
        MIDDLE: 2.0<br/>
        INDEX: 2.0<br/>
        THUMB: 1.0<br/>
    </p>
    <p>I also reduce the weighting of this element of the scoring from 33% to 20%.</p>
    
    <h3>Element 3: Same-finger bigrams</h3>
    <p>The original app simply counts what proportion of each key presses and done with the same finger as the previous one. It then calculates a percentage score based on the same-finger ratio in the range 0 to 10%. In other worlds, a layouts with a 5% same-finger ratio, would score 50% in this element.</p>
    <p><b><u>Fix:</u></b> No fix needed. The weighting of this element of the calculation is increased from 17% to 30%.<br/>

    <h3>Element 4: Hand alternation</h3>
    <p>Similar to the same-finger count, it simply counts which proportion of key presses were with same hand as the previous one. This favours heavily alternating layouts. However, in my view this flawed, as no account is taken that some same-hand combinations are actually some of the most comfortable bigrams of all: the Colemak ST and NE, or the Dvorak TH, for examples. Perhaps this element could be improved, for example to detect longer same-hand sequences which would be detrimental. In it's current form though, I don't see much value in this element.</p>
    <p><b><u>Fix:</u></b> Removed from the scoring calculation.<br/>

    <h2>Other changes made from the original repo</h2>

    <ul>
        <li>There were a lot of seemingly random, unrecognised layouts. I removed most of them. The list now only contains layouts that are at least semi-well-known in the community.</li>
        <li>The Colemak-DH layout variants have been added.</li>
        <li>Number of layouts in the comparison changed from 5 to 6.</li>
        <li>Removed the generated 'Personalized Layout' as I considered it to not really have any value.</li>
        <li>Various other input texts have been added, these were obtained from shenafu's fork of the same app.</li>
        <li>Disabled the API functionality (e.g. link to results) as github hosting does not support php.</li>
    </ul>

    <h2>Bugs</h2>

    <p>Please report bugs to at the <a href="https://github.com/stevep99/keyboard-layout-analyzer/issues">issue tracker</a> on github.</p>

</div>
